_prepare_fragKey() {
	mkdir -p -m 700 "$fragKey_fs"
	
	mkdir -p -m 700 "$fragKey_data"
	mkdir -p -m 700 "$fragKey_tmp"
	mkdir -p -m 700 "$fragKey_root_project"
	
	mkdir -p -m 700 "$fragKey_root_portal"
	mkdir -p -m 700 "$fragKey_root_divination"
	mkdir -p -m 700 "$fragKey_root_sub"
}

_prepare_fragKey_assembly() {
	mkdir -p -m 700 "$fragKey_project"
	
	mkdir -p -m 700 "$fragKey_portal"
	mkdir -p -m 700 "$fragKey_divination"
	mkdir -p -m 700 "$fragKey_sub"
}

_prepare_fragKey_volume() {
	mkdir -p -m 700 "$fragKey_volume"
}

_set_fragKey() {
	export fragKey_fs="$fsPath"
	
	export fragKey_data=$(_getAbsoluteLocation "$dataDir"/_fragKey)
	export fragKey_tmp="$safeTmp"/fragKey
	export fragKey_root_project="$scriptAbsoluteFolder"/"$oracleTmp"/project
	
	
	## Container variables.
	export fragKey_container="$containerPath"
	
	# WARNING: Safety check, uniquely identifies container to reduce risk of unintended overwriting.
	export fragKey_registration="$fragKey_data"/containerid
	
	# WARNING: Must be created by atomic "mv" operation.
	# DANGER: Must be deleted to "close" encrypted volume.
	export fragKey_active="$fragKey_root_project"/c-h
	
	
	## Assembly root variables.
	export fragKey_root_portal="$fragKey_data"/portal
	export fragKey_root_divination="$fragKey_tmp"/divination
	export fragKey_root_sub="$fragKey_tmp"/sub
}

_assign_fragKey_key_id() {
	[[ $(echo -n "$1" | wc -c | tr -dc '0-9') != '26' ]] && return 1
	export fragKey_id="$1"
	return 0
}

_set_fragKey_key_rand() {
	export fragKey_id=$(_uid 26)
}

# WARNING: PREREQUSITE: "_assign_fragKey_key" || "_set_fragKey_key_rand"
_set_fragKey_key_assembly() {
	[[ "$fragKey_id" == "" ]] && return 1
	
	export fragKey_project="$fragKey_root_project"/"$fragKey_id"
	export fragKey_portal="$fragKey_root_portal"/"$fragKey_id"
	export fragKey_divination="$fragKey_root_divination"/"$fragKey_id"
	export fragKey_sub="$fragKey_root_sub"/"$fragKey_id"
	
	# Actual volume decryption key. Stored encrypted by sub keys. Length must be 384bytes, alphanumeric.
	export fragKey_header="$fragKey_divination"/c-h
	
	# Encrypted pack containing header key, requiring subkeys.
	export fragKey_pack="$fragKey_portal"/pack
	
	# Concatenated key from complete set of any subkeys and password.
	export fragKey_set="$fragKey_divination"/set
	
	# No production use. Exists and set to '1' if true.
	export fragKey_readiness="$fragKey_portal"/readiness
	
	
	# DANGER: Recommend 144char default subkeys.
	## Subkeys.
	
	# No production use, not generated by default.
	# Path, one key. Password. Length must be 0char, 12char or 24char, alphanumeric.
	export fragKey_password=pswd
	export fragKey_password_project="$fragKey_project"/"$fragKey_password"
	export fragKey_password_sub="$fragKey_sub"/"$fragKey_password"
	export fragKey_password_portal="$fragKey_portal"/"$fragKey_password"
	
	# Path, direct, only one sub key (ie. /drct_01), and password, in set. Length must be >48bytes, or >96bytes, alphanumeric.
	export fragKey_direct=drct
	export fragKey_direct_project="$fragKey_project"/"$fragKey_direct"
	export fragKey_direct_sub="$fragKey_sub"/"$fragKey_direct"
	export fragKey_direct_portal="$fragKey_portal"/"$fragKey_direct"
	
	# Path, special, only one sub key (ie. /spec_01), and password, in set. Length must be >48bytes, or >96bytes, alphanumeric.
	export fragKey_special=spec
	export fragKey_special_project="$fragKey_project"/"$fragKey_special"
	export fragKey_special_sub="$fragKey_sub"/"$fragKey_special"
	export fragKey_special_portal="$fragKey_portal"/"$fragKey_special"
	
	# No production use.
	# Path, dozen keys - distributed, and password, in set. Some keys may be copied to portal, others distributed.
	export fragKey_distributed=dist
	export fragKey_distributed_project="$fragKey_project"/"$fragKey_distributed"
	export fragKey_distributed_sub="$fragKey_sub"/"$fragKey_distributed"
	export fragKey_distributed_portal="$fragKey_portal"/"$fragKey_distributed"
	
	# Flexible sizes, 12char, 24char, 48char, 96char.
	# Path, dozen keys - distributed, and password, in set. Some keys may be copied to portal, others distributed.
	export fragKey_flexible=flex
	export fragKey_flexible_project="$fragKey_project"/"$fragKey_flexible"
	export fragKey_flexible_sub="$fragKey_sub"/"$fragKey_flexible"
	export fragKey_flexible_portal="$fragKey_portal"/"$fragKey_flexible"
}

_set_fragKey_key_volume() {
	#Statistically independent parts of header key.
	export fragKey_volume="$fragKey_tmp"/volume
}

_generate_fragKey_header_procedure() {
	_messagePlain_nominal 'init: _generate_fragKey_header'
	
	[[ -e "$fragKey_active" ]] && _messagePlain_bad 'fail: exists: key: header' && _stop 1
	
	_gatherEntropy
	
	_extractEntropyAlpha 48 > "$fragKey_volume"/01
	_extractEntropyAlpha 48 >> "$fragKey_volume"/01
	_extractEntropyAlpha 48 > "$fragKey_volume"/02
	_extractEntropyAlpha 48 >> "$fragKey_volume"/02
	_extractEntropyAlpha 48 > "$fragKey_volume"/03
	_extractEntropyAlpha 48 >> "$fragKey_volume"/03
	_extractEntropyAlpha 48 > "$fragKey_volume"/04
	_extractEntropyAlpha 48 >> "$fragKey_volume"/04
	
	_join_fragKey_volume
	
	_messagePlain_good 'pass: _generate_fragKey_header'
}

_generate_fragKey_header_sequence() {
	_start
	
	_set_fragKey
	_set_fragKey_key_rand
	_set_fragKey_key_assembly
	_set_fragKey_key_volume
	
	_prepare_fragKey
	_prepare_fragKey_assembly
	_prepare_fragKey_volume
	
	_generate_fragKey_header_procedure
	
	_stop_fragKey_noempty
}

_join_fragKey_volume() {
	cat "$fragKey_volume"/01 "$fragKey_volume"/02 "$fragKey_volume"/03 "$fragKey_volume"/04 > "$fragKey_header"
	
	mv "$fragKey_header" "$fragKey_active"
}

_separate_fragKey_volume() {
	head -c 96 "$fragKey_active" | tail -c 96 > "$fragKey_volume"/01
	head -c 192 "$fragKey_active" | tail -c 96 > "$fragKey_volume"/02
	head -c 288 "$fragKey_active" | tail -c 96 > "$fragKey_volume"/03
	head -c 384 "$fragKey_active" | tail -c 96 > "$fragKey_volume"/04
}

_stop_fragKey_noempty() {
	rmdir "$fragKey_portal" > /dev/null 2>&1
	rmdir "$fragKey_project" > /dev/null 2>&1
	_stop "$1"
}


