# DANGER: Intended to delete project, header, temporary files.
_purge_fragKey_project_procedure() {
	_messagePlain_nominal 'init: _purge_fragKey_project'
	
	[[ ! -e "$fragKey_root_project" ]] && _messagePlain_warn 'warn: missing: project' && return 0
	
	_safeRMR "$fragKey_root_project"
	[[ -e "$fragKey_root_project" ]] && _messagePlain_bad 'fail: exists: project' && return 1
	_messagePlain_good 'pass: _purge_fragKey_project'
}

_purge_fragKey_project_sequence() {
	_start
	
	_set_fragKey
	_set_fragKey_key_rand
	_set_fragKey_key_assembly
	_set_fragKey_key_volume
	
	_prepare_fragKey
	_prepare_fragKey_assembly
	_prepare_fragKey_volume
	
	if ! _purge_fragKey_project_procedure
	then
		_stop 1
	fi
	
	_stop_fragKey_noempty
}

_purge_fragKey_project() {
	_purge_fragKey_header
	
	_messageNormal 'init: _purge_fragKey_project'
	if ! "$scriptAbsoluteLocation" _purge_fragKey_project_sequence "$@"
	then
		_messageError 'FAIL'
		return 1
	fi
}

_purge_pack() {
	_sweep "$fragKey_pack"
}

_pack_header() {
	cat "$fragKey_set" | _passEncrypt "$fragKey_active" "$fragKey_pack"
}

_unpack_header() {
	cat "$fragKey_set" | _passDecrypt "$fragKey_active" "$fragKey_pack"
}

_select_fragKey_password() {
	[[ -e "$fragKey_password_project" ]] && cat "$fragKey_password_project" >> "$fragKey_set"
}

_select_fragKey() {
	[[ -e "$fragKey_sub"/"$1" ]] && cat "$fragKey_sub"/"$1" >> "$fragKey_set" && return 0
	[[ -e "$fragKey_portal"/"$1" ]] && cat "$fragKey_portal"/"$1" >> "$fragKey_set" && return 0
	
	# WARNING: Nonpersistent.
	[[ -e "$fragKey_project"/"$1" ]] && cat "$fragKey_project"/"$1" >> "$fragKey_set" && return 0
	
	return 1
}




_generic_fragKey_sub_sequence() {
	_start
	
	_set_fragKey
	
	_set_fragKey_key_rand
	[[ "$2" != "" ]] && ! _assign_fragKey_key_id "$2" > /dev/null 2>&1 && _set_fragKey_key_rand
	
	_set_fragKey_key_assembly
	_set_fragKey_key_volume
	
	_prepare_fragKey
	_prepare_fragKey_assembly
	_prepare_fragKey_volume
	
	if ! "$@"
	then
		_stop_fragKey_noempty 1
	fi
	
	_stop_fragKey_noempty
}

_generic_fragKey_sub() {
	_messageNormal 'init: '"$1"
	if ! "$scriptAbsoluteLocation" _generic_fragKey_sub_sequence "$@"
	then
		_messageError 'FAIL'
		return 1
	fi
}

_generic_fragKey_sub_silent() {
	#_messageNormal 'init: '"$1"
	if ! "$scriptAbsoluteLocation" _generic_fragKey_sub_sequence "$@"
	then
		#_messageError 'FAIL'
		return 1
	fi
}


_password_fragKey_sub_procedure() {
	_messagePlain_nominal '-----REQUEST: password . Type password, send '"'"'Ctrl+d'"'"' (twice) .'
	stty -echo > /dev/null 2>&1
	cat > "$fragKey_password_project"
	stty echo > /dev/null 2>&1
}
_password_fragKey_sub() {
	_generic_fragKey_sub _password_fragKey_sub_procedure "$@"
}

# WARNING: Applied to all key types.
# No production use, not generated by default.
# "$1" == keyID
_password_fragKey() {
	_password_fragKey_sub "$@"
}

_path_fragKey_header_procedure() {
	echo "$fragKey_root_project"/c-h
	mkdir -p -m 700 "$fragKey_root_project" > /dev/null 2>&1
}

# "$1" == keyID
_path_fragKey_header() {
	_generic_fragKey_sub_silent _path_fragKey_header_procedure "$@"
}
